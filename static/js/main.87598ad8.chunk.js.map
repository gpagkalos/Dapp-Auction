{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","theHighestBid","accounts","contract","bidvalue","theHighestBidder","contractBalance","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","AuctionContract","networks","instance","Contract","abi","address","setState","alert","error","bid","methods","send","from","value","utils","toWei","withdraw","getHighestBidder","highestBidder","call","response","getHighestBid","highestBid","getContractBalance","setBidValue","event","target","this","infobidder","infobid","infocontractBalance","className","onClick","type","onChange","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.87598ad8.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport AuctionContract from \"./contracts/Auction.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { theHighestBid: 0, \n  web3: null, \n  accounts: null, \n  contract: null, \n  bidvalue: null,\n  theHighestBidder: null,\n  contractBalance: 0\n  \n};\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = AuctionContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        AuctionContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance});\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  bid = async () => {\n    const { accounts, contract, web3 } = this.state;\n\n    await contract.methods.bid().send({ from: accounts[0], value: web3.utils.toWei(this.state.bidvalue,\"finney\") });\n\n  };\n\n  withdraw = async () => {\n    const { accounts, contract, } = this.state;\n\n    await contract.methods.withdraw().send({ from: accounts[0]});\n\n  };\n\n  getHighestBidder = async () => {\n    const contract  = this.state.contract;\n\n    const response = await contract.methods.highestBidder().call();\n    this.setState({ theHighestBidder: response });\n\n  };\n\n  getHighestBid = async () => {\n    const contract  = this.state.contract;\n\n    const response = await contract.methods.highestBid().call();\n    this.setState({ theHighestBid: response });\n\n  };\n\n  getContractBalance =  async () => {\n    const contract  = this.state.contract;\n\n    const response = await contract.methods.getContractBalance().call();\n    this.setState({ contractBalance: response });\n\n  };\n\n  setBidValue = (event) => {\n    this.setState({bidvalue: event.target.value},()=>{\n      console.log(this.state.bidvalue)\n    });\n  }\n\n  render() {\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    let infobidder\n    if (this.state.theHighestBidder == null){\n      infobidder=\"\"\n    }\n    else{\n      infobidder=<div> public address: {this.state.theHighestBidder}</div>\n    }\n\n    let infobid\n    if (this.state.theHighestBid === 0){\n      infobid=\"\"\n    }\n    else{\n      infobid=<div> highest Bid in Wei: {this.state.theHighestBid}</div>\n    }\n    let infocontractBalance\n    if (this.state.contractBalance === 0){\n      infocontractBalance=\"\"\n    }\n    else{\n      infocontractBalance=<div>{this.state.contractBalance}</div>\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>Auction</h1>\n        <div> <br/> press to see the highest Bidder </div>\n        <button onClick = {this.getHighestBidder}> get Highest Bidder </button>\n        {infobidder}\n        <div> <br/> <br/> press to see the highest Bid </div>\n        <button onClick = {this.getHighestBid}> get Highest Bid </button>\n        {infobid}\n        <div> <br/> <br/>type amount to bid (in finney) </div>\n        <input type = \"number\" onChange={this.setBidValue} />\n        <button onClick = {this.bid}> bid </button>\n        <div> <br/> press to withdraw </div>\n        <button onClick = {this.withdraw}> withdraw </button>\n        <div> <br/> press to see contact balance </div>\n        <button onClick = {this.getContractBalance}> contract balance </button>\n        {infocontractBalance}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}